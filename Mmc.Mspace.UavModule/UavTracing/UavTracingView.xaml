<blankWindow:BlankWindow x:Class="Mmc.Mspace.UavModule.UavTracing.UavTracingView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:gvifm="http://schemas.mmc.com/wpf"
            xmlns:blankWindow="http://GFramework.org"
            Width="340" Style="{DynamicResource baseWindowStyle}" WindowStartupLocation="Manual" Height="780" ResizeMode="NoResize" >
    <FrameworkElement.Resources>
        <ResourceDictionary>
            <LinearGradientBrush x:Key="ExpanderArrowHoverFill" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#FFF0F8FE" Offset="0"/>
                <GradientStop Color="#FFE0F3FE" Offset="0.3"/>
                <GradientStop Color="#FF6FA7C5" Offset="1"/>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="ExpanderArrowPressedFill" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#FFDCF0FA" Offset="0"/>
                <GradientStop Color="#FFC5E6F7" Offset="0.2"/>
                <GradientStop Color="#FF5690D0" Offset="1"/>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="ExpanderArrowFill" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="White" Offset="0"/>
                <GradientStop Color="#FFBFBFBF" Offset="0.5"/>
                <GradientStop Color="#FF878787" Offset="1"/>
            </LinearGradientBrush>

            <DataTemplate x:Key="VideoScreenTemplate">
                <Grid>
                    <TextBlock Text="{Binding ScreenItem}"  Foreground="White" FontWeight="Bold" Style="{StaticResource DefaultTextBlockStyle}"  HorizontalAlignment="Center" />
                </Grid>
            </DataTemplate>

            <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid SnapsToDevicePixels="False" Background="Transparent">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="19"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Grid>
                                        <Grid.LayoutTransform>
                                            <TransformGroup>
                                                <TransformGroup.Children>
                                                    <TransformCollection>
                                                        <RotateTransform Angle="-90"/>
                                                    </TransformCollection>
                                                </TransformGroup.Children>
                                            </TransformGroup>
                                        </Grid.LayoutTransform>
                                        <Ellipse Fill="{DynamicResource ExpanderArrowFill}" Stroke="DarkGray" HorizontalAlignment="Center" x:Name="circle" VerticalAlignment="Center" Width="19" Height="19"/>
                                        <Path Stroke="#666" StrokeThickness="2" HorizontalAlignment="Center" x:Name="arrow" VerticalAlignment="Center" SnapsToDevicePixels="false" Data="M 1,1.5 L 4.5,5 L 8,1.5"/>
                                    </Grid>
                                    <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" VerticalAlignment="Top" SnapsToDevicePixels="True" Grid.Row="1" RecognizesAccessKey="True"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="#FF3C7FB1"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ExpanderArrowHoverFill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="#222"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="#FF526C7B"/>
                                    <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ExpanderArrowPressedFill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="#FF003366"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid SnapsToDevicePixels="False" Background="Transparent">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="19"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid>
                                        <Grid.LayoutTransform>
                                            <TransformGroup>
                                                <TransformGroup.Children>
                                                    <TransformCollection>
                                                        <RotateTransform Angle="180"/>
                                                    </TransformCollection>
                                                </TransformGroup.Children>
                                            </TransformGroup>
                                        </Grid.LayoutTransform>
                                        <Ellipse Fill="{DynamicResource ExpanderArrowFill}" Stroke="DarkGray" HorizontalAlignment="Center" x:Name="circle" VerticalAlignment="Center" Width="19" Height="19"/>
                                        <Path Stroke="#666" StrokeThickness="2" HorizontalAlignment="Center" x:Name="arrow" VerticalAlignment="Center" SnapsToDevicePixels="false" Data="M 1,1.5 L 4.5,5 L 8,1.5"/>
                                    </Grid>
                                    <ContentPresenter HorizontalAlignment="Stretch" Margin="4,0,19,0" VerticalAlignment="Center" SnapsToDevicePixels="True" Grid.Column="1" RecognizesAccessKey="True"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="#FF3C7FB1"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ExpanderArrowHoverFill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="#222"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="#FF526C7B"/>
                                    <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ExpanderArrowPressedFill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="#FF003366"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid SnapsToDevicePixels="False" Background="Transparent">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="19"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Grid>
                                        <Grid.LayoutTransform>
                                            <TransformGroup>
                                                <TransformGroup.Children>
                                                    <TransformCollection>
                                                        <RotateTransform Angle="90"/>
                                                    </TransformCollection>
                                                </TransformGroup.Children>
                                            </TransformGroup>
                                        </Grid.LayoutTransform>
                                        <Ellipse Fill="{DynamicResource ExpanderArrowFill}" Stroke="DarkGray" HorizontalAlignment="Center" x:Name="circle" VerticalAlignment="Center" Width="19" Height="19"/>
                                        <Path Stroke="#666" StrokeThickness="2" HorizontalAlignment="Center" x:Name="arrow" VerticalAlignment="Center" SnapsToDevicePixels="false" Data="M 1,1.5 L 4.5,5 L 8,1.5"/>
                                    </Grid>
                                    <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" VerticalAlignment="Top" SnapsToDevicePixels="True" Grid.Row="1" RecognizesAccessKey="True"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="#FF3C7FB1"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ExpanderArrowHoverFill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="#222"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Stroke" TargetName="circle" Value="#FF526C7B"/>
                                    <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                    <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ExpanderArrowPressedFill}"/>
                                    <Setter Property="Stroke" TargetName="arrow" Value="#FF003366"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ExpanderHeaderFocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Border>
                                <Rectangle Stroke="Black" StrokeDashArray="1 2" StrokeThickness="1" Margin="0" SnapsToDevicePixels="true"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style   x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid SnapsToDevicePixels="False" Background="Transparent">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Image Grid.Row="0" Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Center" Name="img1" Margin="10,0,0,0" Width="7.2" Height="4.6" Source="{DynamicResource up_N}"  Stretch="Uniform" ></Image>

                                    <ContentPresenter HorizontalAlignment="Stretch" Margin="4,0,19,0" VerticalAlignment="Center" SnapsToDevicePixels="True" Grid.Column="1" RecognizesAccessKey="True"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Source" TargetName="img1" Value="{DynamicResource down_H}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style   x:Key="ExpanderDownHeaderStyle2" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid SnapsToDevicePixels="False" Background="#1E2026">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="36"/>
                                        <RowDefinition/>
                                    </Grid.RowDefinitions>
                                    <Image Grid.Row="0" Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Center" Name="img1" Margin="10,0,0,0" Width="24" Height="24" Source="{DynamicResource Mmc_uav}"  Stretch="Uniform" ></Image>
                                    <Image Grid.Row="0" Grid.Column="2" HorizontalAlignment="Left" VerticalAlignment="Center" Name="img2" Margin="0,0,0,0" Width="24" Height="24" Source="{DynamicResource packdown_N}"  Stretch="Uniform" ></Image>
                                    <StackPanel Grid.Row="0" Grid.Column="1"  Orientation="Horizontal" HorizontalAlignment="Center">
                                        <TextBlock Text="{DynamicResource Dronelist}"  Style="{StaticResource DefaultTextBlockStyle}" HorizontalAlignment="Center"   />
                                        <TextBlock    Style="{StaticResource DefaultTextBlockStyle}"   Margin="0,0,0,0" HorizontalAlignment="Center"  >
                                        <Run  Text="("/>
                                            <Run   Text="{Binding DataContext.socketState, RelativeSource={RelativeSource AncestorType={x:Type blankWindow:BlankWindow}}}"/>
                                            <Run  Text="）"/>
                                        </TextBlock>
                                    </StackPanel>

                                    <ContentPresenter Grid.Row="1" Grid.ColumnSpan="3" HorizontalAlignment="Stretch" Margin="0" VerticalAlignment="Center" SnapsToDevicePixels="True" Grid.Column="1" RecognizesAccessKey="True"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Source" TargetName="img2" Value="{DynamicResource packup_H}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">

                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="StretchExpanderStyle" TargetType="{x:Type Expander}">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Expander}">
                            <Border SnapsToDevicePixels="true" Margin="{TemplateBinding Margin}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3">
                                <DockPanel>
                                    <ToggleButton FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" Margin="{TemplateBinding Padding}" MinHeight="0" MinWidth="0" x:Name="HeaderSite" Style="{StaticResource ExpanderDownHeaderStyle}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontStretch="{TemplateBinding FontStretch}" FontStyle="{TemplateBinding FontStyle}" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" DockPanel.Dock="Top" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" x:Name="ExpandSite" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="false" Visibility="Collapsed" DockPanel.Dock="Bottom"/>
                                </DockPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="true">
                                    <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Right">
                                    <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                                    <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Up">
                                    <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                                    <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Left">
                                    <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                                    <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="StretchExpanderStyle2" TargetType="{x:Type Expander}">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Expander}">
                            <Border SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3">
                                <DockPanel>
                                    <ToggleButton FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" Margin="1" MinHeight="36" MinWidth="0" x:Name="HeaderSite" Style="{StaticResource ExpanderDownHeaderStyle2}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontStretch="{TemplateBinding FontStretch}" FontStyle="{TemplateBinding FontStyle}" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" DockPanel.Dock="Top" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" x:Name="ExpandSite" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="false" Visibility="Collapsed" DockPanel.Dock="Bottom"/>
                                </DockPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="true">
                                    <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Right">
                                    <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                                    <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Up">
                                    <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                                    <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
                                </Trigger>
                                <Trigger Property="ExpandDirection" Value="Left">
                                    <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                                    <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type gvifm:IconToggleButton}" x:Key="{x:Type gvifm:IconToggleButton}">
                <Setter Property="Content" Value="{Binding Content}" />
                <Setter Property="gvifm:IconToggleButton.Icon" Value="{Binding Icon}" />
                <Setter Property="gvifm:IconToggleButton.MouseOverIcon" Value="{Binding MouseOverIcon}" />
                <Setter Property="gvifm:IconToggleButton.CheckedIcon" Value="{Binding CheckedIcon}" />
                <Setter Property="FrameworkElement.ToolTip" Value="{Binding ToolTip}" />
                <Setter Property="gvifm:IconToggleButton.IsChecked" Value="{Binding IsChecked}" />
            </Style>           
           
            <Style x:Key="ListBoxItemMouseOverStyle" TargetType="ListBoxItem">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="Transparent" />
                    </Trigger>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Background" Value="Transparent"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="TreeViewItemFocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Border>
                                <Rectangle Margin="0,0,0,0"
                                           StrokeThickness="5"
                                           Stroke="Black"
                                           StrokeDashArray="1 2"
                                           Opacity="0" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="{x:Type TreeViewItem}" TargetType="{x:Type TreeViewItem}">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
                <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
                <Setter Property="Padding" Value="1,0,0,0" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TreeViewItem}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MinWidth="19" Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>

                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition />
                                </Grid.RowDefinitions>

                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="ExpansionStates">
                                        <VisualState x:Name="Expanded">
                                            <Storyboard>
                                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ItemsHost">
                                                    <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                                </ObjectAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Collapsed" />
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>

                                <ToggleButton x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}" ClickMode="Press" IsChecked="{Binding IsExpanded,RelativeSource={RelativeSource TemplatedParent}}"/>

                                <Border x:Name="Bd" Grid.Column="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Padding="{TemplateBinding Padding}">
                                    <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                                </Border>

                                <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" Visibility="Collapsed" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="HasItems" Value="false">
                                    <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                                </Trigger>

                                <Trigger Property="IsSelected" Value="True">
                                    <Setter TargetName="Bd" Property="BorderBrush" Value="#50ABFF"/>
                                    <Setter TargetName="Bd" Property="BorderThickness" Value="1"/>
                                </Trigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="HasHeader" Value="false" />
                                        <Condition Property="Width" Value="Auto" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="PART_Header" Property="MinWidth" Value="75" />
                                </MultiTrigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="HasHeader" Value="false" />
                                        <Condition Property="Height" Value="Auto" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="PART_Header" Property="MinHeight" Value="19" />
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

        </ResourceDictionary>
    </FrameworkElement.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="40"/>
            
            <RowDefinition/>
        </Grid.RowDefinitions>
        <Border Grid.Row="0" Background="#292C35" Grid.Column="0" Grid.ColumnSpan="2" CornerRadius="5,5,0,0" blankWindow:BlankWindow.Draggable="True" />
        <TextBlock x:Name="TitleName" blankWindow:BlankWindow.Draggable="True"  Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Text="{Binding WindowTitle}" Margin="18,0,0,0" Foreground="White"  FontSize="18" HorizontalAlignment="Left" VerticalAlignment="Center"/>
        <Button Grid.Row="0" x:Name="CloseButton" Grid.Column="0" Grid.ColumnSpan="2" Command="{Binding CloseCmd}"  Style="{DynamicResource ButtonCloseStyle}" Height="36" Width="36" HorizontalAlignment="Right" VerticalAlignment="Top"  Margin="0,2,8,0" />
     
           
        <StackPanel Grid.Row="1" Orientation="Vertical" HorizontalAlignment="Stretch">
            <StackPanel Orientation="Horizontal" Grid.Row="0" Grid.Column="0">
                <RadioButton Margin="20,10" Style="{StaticResource DefaultRadioButtonStyle}"  HorizontalAlignment="Center" VerticalAlignment="Center" Content="按任务显示" Command="{Binding AreaListCmd}"  GroupName="DrawModel" Foreground="WhiteSmoke"  IsChecked="{Binding ModelIsChecked}" ></RadioButton>
                <RadioButton Margin="20,10" Style="{StaticResource DefaultRadioButtonStyle}"  HorizontalAlignment="Center" VerticalAlignment="Center" Content="按区域显示" Command="{Binding MissionListCmd}"  GroupName="DrawModel" Foreground="WhiteSmoke"   IsChecked="{Binding DrawIsChecked}" ></RadioButton>
            </StackPanel>
                <Expander IsExpanded="True"  Style="{DynamicResource StretchExpanderStyle2}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Expander.Header >
                    <Button  x:Name="connectSocketBtn" Height="28" Style="{DynamicResource DefaultButtonStyle}" Margin="-25,0,10,0" HorizontalAlignment="Left" Command="{Binding connectSocketCMD}" Content="{DynamicResource ConnectionContent}" />
                </Expander.Header>
                <Expander.Content>
                    <TreeView ItemsSource="{Binding UavItemAreaModels}" Background="#292C35" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Height="520" SelectedItemChanged="TreeView_OnSelectedItemChanged" Margin="0,10">
                        <TreeView.ItemTemplate>
                            <HierarchicalDataTemplate ItemsSource="{Binding UavItemModels}">
                                <StackPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Stretch" Name="sp">
                                    <TextBlock Text="{Binding AreaName}" ToolTip="{Binding AreaName}" Margin="0,0,0,0" FontWeight="Bold" FontSize="18" Style="{StaticResource DefaultTextBlockStyle}"  HorizontalAlignment="Left" MaxWidth="150"/>
                                    <TextBlock Margin="10,0" Style="{StaticResource DefaultTextBlockStyle}" HorizontalAlignment="Left" FontSize="16">
                                        <Run  Text="{Binding OnLine,StringFormat={}({0} 在线 }"/>
                                        <Run Text="{Binding OffLine,StringFormat={}{0} 离线)}"/>
                                    </TextBlock>
                                </StackPanel>

                                <HierarchicalDataTemplate.ItemTemplate>
                                    <HierarchicalDataTemplate>
                                        <Expander IsExpanded="{Binding IsExpanded}" Margin="0 0 0 0" Style="{DynamicResource StretchExpanderStyle}" MinWidth="325"  HorizontalAlignment="Left" VerticalAlignment="Stretch" >
                                            <Expander.Header>
                                                <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                                    <TextBlock Text="{Binding UavTitle}" Margin="0,0,0,0" FontWeight="Bold" Style="{StaticResource DefaultTextBlockStyle}"  HorizontalAlignment="Left" MaxWidth="180" TextTrimming="CharacterEllipsis" ToolTip="{Binding UavTitle}"/>

                                                    <DockPanel HorizontalAlignment="Right">
                                                        <gvifm:IconToggleButton  x:Name="tractBtn"  Width="24" Height="24" Margin="5,0,0,0" DockPanel.Dock="Left"
                                                         DataContext="{Binding UavTracingModel}"
                                                         Icon="pack://siteoforigin:,,,/Resources/Uav/轨迹@3x.png"
                                                         MouseOverIcon="pack://siteoforigin:,,,/Resources/Uav/轨迹H@3x.png"
                                                         CheckedIcon="pack://siteoforigin:,,,/Resources/Uav/轨迹C@3x.png"
                                                         ToolTip="{DynamicResource RealtimeTrajectory}" ></gvifm:IconToggleButton>
                                                        
                                                        <gvifm:IconToggleButton  x:Name="videotBtn"  Width="24" Height="24"  Margin="5,0,0,0" HorizontalAlignment="Center"
                                                         DataContext="{Binding VideoControllerVM}" 
                                                         Icon="pack://siteoforigin:,,,/Resources/Uav/录像@3x.png"
                                                         MouseOverIcon="pack://siteoforigin:,,,/Resources/Uav/录像H@3x.png"
                                                         CheckedIcon="pack://siteoforigin:,,,/Resources/Uav/录像H@3x.png"
                                                         ToolTip="{DynamicResource Realtimevideo}" ></gvifm:IconToggleButton>
                                                        
                                                        <ComboBox  Style="{DynamicResource DefaultComboBoxStyle}" Visibility="{Binding Path=IsMultiScreen, Converter={StaticResource BooleanToVisibilityConverter} }" Margin="5,0,0,0"
                                           Width="100" ItemTemplate="{StaticResource VideoScreenTemplate}" ItemsSource="{Binding VideoScreenModels}" FontSize="12"
                                           SelectedItem="{Binding SelectedScreenModel}" IsEnabled="{Binding Path=IsComboxEnabled }"/>
                                                        
                                                        <gvifm:IconToggleButton  x:Name="followBtn"  Width="24" Height="24"  Margin="5,0,0,0" DockPanel.Dock="Right"
                                                         IsChecked="{Binding UavTracingModel.IsFollow}"
                                                         Icon="pack://siteoforigin:,,,/Resources/Uav/定位@3x.png"
                                                         MouseOverIcon="pack://lisi:,,,/Resources/Uav/定位H@3x.png"
                                                         CheckedIcon="pack://siteoforigin:,,,/Resources/Uav/定位H@3x.png"
                                                         ToolTip="{DynamicResource Perspectivetofollow}" ></gvifm:IconToggleButton>
                                                    </DockPanel>
                                                </Grid>
                                            </Expander.Header>
                                            <Expander.Content>
                                                <DockPanel>
                                                    <ItemsControl Name="cmds" Margin="10,3" HorizontalAlignment="Right" DockPanel.Dock="Bottom" Visibility="Collapsed">
                                                        <ItemsControl.ItemsPanel>
                                                            <ItemsPanelTemplate>
                                                                <gvifm:UniformGridWithSpacing HorizontalAlignment="Center" Rows="1" Columns="{Binding Items.Count, RelativeSource={RelativeSource AncestorType=ItemsControl, Mode=FindAncestor}}" />
                                                            </ItemsPanelTemplate>
                                                        </ItemsControl.ItemsPanel>
                                                    </ItemsControl>
                                                    <Grid  Margin="10,10,5,10">
                                                        <FrameworkElement.Resources>
                                                            <ResourceDictionary>
                                                                <Style TargetType="{x:Type TextBlock}" x:Key="{x:Type TextBlock}">
                                                                    <Setter Property="FontFamily" Value="Microsoft YaHei"/>
                                                                    <Setter Property="FontSize" Value="{DynamicResource FontSize15}"/>
                                                                    <Setter Property="Foreground" Value="{DynamicResource DefaultButtonForeground}"/>
                                                                    <Setter Property="Margin" Value="0,3" />
                                                                    <Setter Property="VerticalAlignment" Value="Center" />
                                                                    <Setter Property="HorizontalAlignment" Value="Left" />
                                                                </Style>
                                                            </ResourceDictionary>
                                                        </FrameworkElement.Resources>
                                                        <Grid.RowDefinitions>
                                                            <RowDefinition Height="auto" />
                                                            <RowDefinition Height="auto" />
                                                            <RowDefinition Height="auto" />
                                                            <RowDefinition Height="auto" />
                                                            <RowDefinition Height="auto" />
                                                            <RowDefinition Height="auto" />
                                                            <RowDefinition Height="auto" />
                                                        </Grid.RowDefinitions>
                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition 	 Width="Auto" />
                                                            <ColumnDefinition />
                                                        </Grid.ColumnDefinitions>
                                                        <TextBlock Grid.Row="1" Text="{DynamicResource Model}" />
                                                        <TextBlock Grid.Row="1" Grid.Column="1" Text="{Binding deviceInfo.goods_name}" />
                                                        <TextBlock Grid.Row="2" Text="{DynamicResource DeviceName}" />
                                                        <TextBlock Grid.Row="2" TextTrimming="CharacterEllipsis" Grid.Column="1" Text="{Binding deviceInfo.deviceName}" ToolTip="{Binding deviceInfo.deviceName}"  MaxWidth="200"/>
                                                        <TextBlock Grid.Row="3" Text="{DynamicResource DeviceSerial}" />
                                                        <TextBlock Grid.Row="3" TextTrimming="CharacterEllipsis"  Grid.Column="1" Text="{Binding deviceInfo.deviceSerial}" ToolTip="{Binding deviceInfo.deviceSerial}" MaxWidth="200"/>
                                                        <TextBlock Grid.Row="4" Text="{DynamicResource IfControlState}" VerticalAlignment="Top" />
                                                        <TextBlock Grid.Row="4" Grid.Column="1" 	Text="{Binding UavControllableState}" />
                                                        <TextBlock Grid.Row="5" Text="{DynamicResource Type}" Visibility="Collapsed"/>
                                                        <TextBlock Grid.Row="5" Grid.Column="1" Text="{Binding uav_type}" Visibility="Collapsed"/>
                                                        <TextBlock Grid.Row="6" Text="{DynamicResource Mount}" VerticalAlignment="Top" Visibility="Collapsed"/>
                                                        <TextBlock Grid.Row="6" Grid.Column="1" 	Text="{Binding mount_type}" Visibility="Collapsed"/>
                                                        <TextBlock Grid.Row="7" Text="{DynamicResource Videostream}" Visibility="Collapsed"/>
                                                        <TextBlock Grid.Row="7" Grid.Column="1" Text="{Binding CameraState}" Visibility="Collapsed"/>
                                                    </Grid>
                                                </DockPanel>
                                            </Expander.Content>
                                        </Expander>
                                    </HierarchicalDataTemplate>
                                </HierarchicalDataTemplate.ItemTemplate>
                            </HierarchicalDataTemplate>
                        </TreeView.ItemTemplate>
                    </TreeView>
                </Expander.Content>
            </Expander>
        </StackPanel>
    </Grid>
</blankWindow:BlankWindow>