<UserControl
	x:Class="MMC.MSpace.Views.BootomToolView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:frame="Mmc.Windows.Framework.Converters;assembly=Mmc.Windows.Framework"
    xmlns:gvi="http://schemas.mmc.com"
    xmlns:gvifm="http://schemas.mmc.com/wpf"
    xmlns:views="clr-namespace:MMC.MSpace.Views"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:dtselector="http://schemas.mmc.com/dtselector"
    xmlns:converter="clr-namespace:MMC.MSpace.Converter"
	HorizontalAlignment="Center"
	VerticalAlignment="Bottom">
    <UserControl.Resources>
        <dtselector:ToolDataTemplateSelector x:Key="ToolDataTemplateSelector" />
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <converter:ConverterKeyToContent x:Key="ConverterKeyToContent"/>
    </UserControl.Resources>

    <ItemsControl
		Name="tools"
		Margin="10 10 10 0"
		ItemTemplateSelector="{DynamicResource ToolDataTemplateSelector}"
		gvifm:AttachedProperties.Orientation="Horizontal"
		ItemsSource="{Binding ShellModel.BottomToolMenuItems}">
        <ItemsControl.Template>
            <ControlTemplate TargetType="{x:Type ItemsControl}">
                <Border CornerRadius="4" BorderThickness="1" BorderBrush="{StaticResource LeftWindowBg}" >
                    <ItemsPresenter/>
                </Border>
            </ControlTemplate>
        </ItemsControl.Template>
        <ItemsControl.ItemsPanel>
            <ItemsPanelTemplate>
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left"  Background="{StaticResource LeftWindowBg}"/>

            </ItemsPanelTemplate>
        </ItemsControl.ItemsPanel>
        <FrameworkElement.Resources>
            <ResourceDictionary>
                <Style
					TargetType="{x:Type ContentPresenter}"
					x:Key="{x:Type ContentPresenter}">
                    <Setter Property="Visibility"	Value="{Binding Visible, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BooleanToVisibilityConverter}}" />

                </Style>
                <Style TargetType="{x:Type gvifm:IconButton}" x:Key="{x:Type gvifm:IconButton}">
                    <Setter	Property="Command"	Value="{Binding Command}" />
                    <Setter	Property="Height"	Value="48" />
                    <Setter	Property="Width"	Value="48" />
                    <Setter	Property="Margin"	Value="3,1" />
                    <Setter	Property="Content" Value="{Binding Content,Converter={StaticResource ConverterKeyToContent}}" />
                    <Setter
						Property="gvifm:IconButton.Icon"
						Value="{Binding Icon}" />
                    <Setter
						Property="gvifm:IconButton.MouseOverIcon"
						Value="{Binding MouseOverIcon}" />
                    <Setter
						Property="gvifm:IconButton.PressedOverIcon"
						Value="{Binding PressedOverIcon}" />
                    <Setter
						Property="FrameworkElement.ToolTip"
						Value="{Binding Content,Converter={StaticResource ConverterKeyToContent}}" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type gvifm:IconButton}">
                                <Border x:Name="PART_Background"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}">
                                    <Image Name="img" Height="48" Width="48"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center"
							Source="{Binding Path=Icon,RelativeSource={RelativeSource TemplatedParent}}"/>

                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger
						          	Property="UIElement.IsMouseOver" Value="True">
                                        <Setter TargetName="img" Property="Source" Value="{Binding Path=MouseOverIcon,RelativeSource={RelativeSource TemplatedParent}}"  />
                                    </Trigger>
                                    <Trigger
						          	Property="IsPressed" Value="True">
                                        <Setter TargetName="img" Property="Source" Value="{Binding Path=PressedOverIcon,RelativeSource={RelativeSource TemplatedParent}}"  />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>

                </Style>
                <Style 
					TargetType="{x:Type gvifm:IconRadioButton}"
					x:Key="{x:Type gvifm:IconRadioButton}">
                    <Setter	Property="Height"	Value="48" />
                    <Setter	Property="Width"	Value="48" />
                    <Setter	Property="Margin"	Value="3,1" />
                    <Setter
						Property="gvifm:IconRadioButton.NCommand"
						Value="{Binding Command}" />
                    <Setter
						Property="Content"
					Value="{Binding Content,Converter={StaticResource ConverterKeyToContent}}" />
                    <Setter
						Property="gvifm:IconRadioButton.Icon"
						Value="{Binding Icon}" />
                    <Setter
						Property="gvifm:IconRadioButton.MouseOverIcon"
						Value="{Binding MouseOverIcon}" />
                    <Setter
						Property="gvifm:IconRadioButton.PressedOverIcon"
						Value="{Binding PressedOverIcon}" />
                    <Setter
						Property="FrameworkElement.ToolTip"
							Value="{Binding Content,Converter={StaticResource ConverterKeyToContent}}" />
                    <Setter
						Property="RadioButton.GroupName"
						Value="{Binding GroupName}" />
                    <Setter
						Property="ToggleButton.IsChecked"
						Value="{Binding IsChecked}" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type gvifm:IconRadioButton}">
                                <Border x:Name="PART_Background"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}">
                                    <Image Name="img" Height="48" Width="48"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center"
							Source="{Binding Path=Icon,RelativeSource={RelativeSource TemplatedParent}}"/>

                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger
						          	Property="UIElement.IsMouseOver" Value="True">
                                        <Setter TargetName="img" Property="Source" Value="{Binding Path=MouseOverIcon,RelativeSource={RelativeSource TemplatedParent}}"  />
                                    </Trigger>
                                    <Trigger
						          	Property="IsChecked" Value="True">
                                        <Setter TargetName="img" Property="Source" Value="{Binding Path=PressedOverIcon,RelativeSource={RelativeSource TemplatedParent}}"  />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
                <Style 
					TargetType="{x:Type gvifm:IconPopupButton}"
					x:Key="{x:Type gvifm:IconPopupButton}">
                    <Setter	Property="Height"	Value="48" />
                    <Setter	Property="Width"	Value="48" />
                    <Setter	Property="Margin"	Value="3,1" />
                    <Setter
						Property="gvifm:IconToggleButton.Icon"
						Value="{Binding Icon}" />
                    <Setter
						Property="Content"
					Value="{Binding Content,Converter={StaticResource ConverterKeyToContent}}" />
                    <Setter
						Property="gvifm:IconToggleButton.MouseOverIcon"
						Value="{Binding MouseOverIcon}" />
                    <Setter
						Property="gvifm:IconToggleButton.PressedOverIcon"
						Value="{Binding PressedOverIcon}" />
                    <Setter
						Property="FrameworkElement.ToolTip"
					Value="{Binding Content,Converter={StaticResource ConverterKeyToContent}}" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type gvifm:IconPopupButton}">
                                <Border x:Name="PART_Background"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}">
                                    <Image Name="img" Height="48" Width="48"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center"
							Source="{Binding Path=Icon,RelativeSource={RelativeSource TemplatedParent}}"/>

                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger
						          	Property="UIElement.IsMouseOver" Value="True">
                                        <Setter TargetName="img" Property="Source" Value="{Binding Path=MouseOverIcon,RelativeSource={RelativeSource TemplatedParent}}"  />
                                    </Trigger>
                                    <Trigger
						          	Property="IsChecked" Value="True">
                                        <Setter TargetName="img" Property="Source" Value="{Binding Path=PressedOverIcon,RelativeSource={RelativeSource TemplatedParent}}"  />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </ResourceDictionary>
        </FrameworkElement.Resources>
    </ItemsControl>

</UserControl>
